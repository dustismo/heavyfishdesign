package transforms

import (
	"testing"

	"github.com/dustismo/heavyfishdesign/path"
)

func TestTrimWhitespaceTransform(t *testing.T) {
	pathStr := `M 1.726 5.858 C 1.726 5.861 2.170 5.774 2.224 5.858 C 2.278 5.941 2.321 6.333 2.448 6.309 C 2.574 6.284 2.602 5.806 2.676 5.828 C 2.749 5.851 3.098 6.275 3.163 6.167 C 3.228 6.060 3.246 5.710 3.188 5.610 C 3.130 5.511 3.692 5.642 3.678 5.561 C 3.664 5.480 3.401 5.178 3.473 5.032 C 3.545 4.886 3.987 4.898 3.987 4.898 C 4.108 4.774 3.333 4.446 3.337 4.493 C 3.350 4.620 3.488 4.027 3.488 4.027 C 3.279 4.031 3.230 4.069 2.970 4.193 C 2.970 4.193 2.881 3.700 2.795 3.646 C 2.710 3.591 2.524 3.932 2.378 4.049 C 2.232 4.166 1.739 3.978 1.677 4.193 C 1.616 4.408 1.868 4.583 1.896 4.617 C 1.923 4.650 1.550 4.810 1.550 4.951 C 1.550 5.092 1.903 5.152 1.902 5.316 C 1.900 5.479 1.726 5.855 1.726 5.858 M 2.961 5.177 M 2.961 5.177 L 2.961 4.684 L 2.768 4.684 L 2.768 5.177 L 2.961 5.177`
	originalPath, err := path.ParsePathFromSvg(pathStr)

	if err != nil {
		t.Errorf("Error %s", err)
	}

	transform := TrimWhitespaceTransform{
		SegmentOperators: path.NewSegmentOperators(),
	}

	p, err := transform.PathTransform(originalPath)
	if err != nil {
		t.Errorf("Error %s", err)
	}
	expectedStr := `M 0.176 2.218 C 0.176 2.221 0.620 2.134 0.674 2.218 C 0.728 2.301 0.771 2.693 0.898 2.669 C 1.024 2.644 1.052 2.166 1.126 2.188 C 1.199 2.211 1.548 2.635 1.613 2.527 C 1.678 2.420 1.696 2.070 1.638 1.970 C 1.580 1.871 2.142 2.002 2.128 1.921 C 2.114 1.840 1.851 1.538 1.923 1.392 C 1.995 1.246 2.437 1.258 2.437 1.258 C 2.558 1.134 1.783 0.806 1.787 0.853 C 1.800 0.980 1.938 0.387 1.938 0.387 C 1.729 0.391 1.680 0.429 1.420 0.553 C 1.420 0.553 1.331 0.060 1.245 0.006 C 1.160 -0.049 0.974 0.292 0.828 0.409 C 0.682 0.526 0.189 0.338 0.127 0.553 C 0.066 0.768 0.318 0.943 0.346 0.977 C 0.373 1.010 0.000 1.170 0.000 1.311 C 0.000 1.452 0.353 1.512 0.352 1.676 C 0.350 1.839 0.176 2.215 0.176 2.218 M 1.411 1.537 M 1.411 1.537 L 1.411 1.044 L 1.218 1.044 L 1.218 1.537 L 1.411 1.537`
	actualStr := path.SvgString(p, 3)

	if expectedStr != actualStr {
		t.Errorf("Expected: %s\nActual: %s", expectedStr, actualStr)
	}
}
